<?php
    require_once('support/interfaces.php');

    require_once('classes/Object.php');
    require_once('classes/Car.php');
    require_once('classes/TV.php');
    require_once('classes/Duck.php');
    require_once('classes/Pen.php');
    require_once('classes/Product.php');     

//Создаем экземпляры классов
//Машины
    $car1 = new Car('Audi', 'magenta', 50500, true);
    
//Телевизоры
    $tv1 = new TV('LG', 10000);

//Утки
    $duck1 = new Duck('пестрая', 2000);
    
//Шариковые ручки
    $pen1 = new Pen();

//Товары
    $product1 = new Product('Хлеб', 'Бородинский', 50);
?>

<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Классы</title>
  <link rel="stylesheet" href="css/styles.css">  
</head>
<body>
    
    <fieldset style="width: 40%;">
        <legend>Наследование от родительского класса</legend>
        <? foreach (Object::$list as $object) : ?>
            <p><?= $object->getInfo() ?></p>
        <? endforeach ?>
            
     </fieldset>

    <fieldset style="width: 50%;">
        <legend>Вопросы к лекции</legend>
        <h2>Наследовние</h2>
        <p style="font-size: 20px;">Наследование является механизмом передачи свойств и методов одних классов в другие (базовые и производные классы). Таким образом выстраивается иерархия классов (дерево наследования). Данный механизм позволяет избегать многократного дублирования кода</p>

        <h2>Полиморфизм</h2>
        <p style="font-size: 20px;">Полиморфизм вытекает из наследования и определяет возможность как переопределения метода базового класса в производном, так и получения разных результатов исходя из контекста использования метода.</p>
        
        <h2>Интерфейс и абстрактный класс</h2>
        <p style="font-size: 20px;">Абстрактный класс - класс, который не может быть реализован в объект. Может иметь или не иметь свойства и обычные методы. Может иметь или не иметь абстрактные методы. В случае, если абстрактные методы есть, они должны быть реализованы в производных классах.<p>
        <p style="font-size: 20px;">Интерфейс по сути является более глубокой реализацией принципа абстракции. Не является шаблоном для создание объекта, применяется при описании класса. При имплементации классом обязует этот класс реализовать метод (в соответствии приведенной сигнатуре), т.е. создает минимальную жесткую структуру класса.<p>
        <p style="font-size: 20px;">Удобство использования одного или другого определяется поставленной задачей. Абстрактный класс удобно использовать при ограниченном числе необходимых методов. Интерфейсы удобны тем, что они могут подключаться к любому классу, вне зависимости от иерархии наследования и не ограничены в количестве применения к классу.</p>
    </fieldset>
     
</body>
</html>